(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{463:function(t,s,a){t.exports=a.p+"assets/img/image-20191103223900503.e9420c80.png"},464:function(t,s,a){t.exports=a.p+"assets/img/image-20191103225043244.2df0ae63.png"},465:function(t,s,a){t.exports=a.p+"assets/img/image-20191103225331571.a015c0f5.png"},466:function(t,s,a){t.exports=a.p+"assets/img/image-20191103225611580.a5d676c4.png"},467:function(t,s,a){t.exports=a.p+"assets/img/image-20191103231523429.e43ace17.png"},468:function(t,s,a){t.exports=a.p+"assets/img/image-20191103231747431.40ab4497.png"},469:function(t,s,a){t.exports=a.p+"assets/img/image-20191103234338120.a3984c1f.png"},470:function(t,s,a){t.exports=a.p+"assets/img/v2-676b69372badac7b2ffcb4b40aebb881_b.170b5f34.jpg"},582:function(t,s,a){"use strict";a.r(s);var e=a(16),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"vim-额外功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vim-额外功能"}},[t._v("#")]),t._v(" vim 额外功能")]),t._v(" "),e("p",[t._v("其实，目前大部分的distribution 都以 vim 取代 vi 的功能了，因为 vim 具有颜色显示、支持许多程序语法（syntax）等功能")]),t._v(" "),e("p",[t._v("那么怎么分辨是否当前 vi 被 vim 取代了呢？")]),t._v(" "),e("p",[t._v("通过 alias 分辨")]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mrcode@study vitest"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("alias")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("alias")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("egrep")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'egrep --color=auto'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("alias")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("fgrep")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fgrep --color=auto'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("alias")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("grep")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'grep --color=auto'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("alias")]),t._v(" l."),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ls -d .* --color=auto'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("alias")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("ll")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ls -l --color=auto'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("alias")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("ls")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ls --color=auto'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("alias")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("vi")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'vim'")]),t._v("\t\t\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 可以看到这里 vi 调用的就是 vim")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("alias")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("which")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 原来上一个章节，笔者使用的不是 vi 而是 vim")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br")])]),e("p",[t._v("通过界面分布")]),t._v(" "),e("p",[e("img",{attrs:{src:a(463),alt:"image-20191103223900503"}})]),t._v(" "),e("p",[t._v("上面显示了光标所在行和当前行第几个字符，这个其实就是 vim 了，而且上面的文字颜色也变成了蓝色")]),t._v(" "),e("h2",{attrs:{id:"区块选择（visual-block"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#区块选择（visual-block"}},[t._v("#")]),t._v(" 区块选择（Visual Block)")]),t._v(" "),e("p",[t._v("上面提到的简单 vi 操作过程中，几乎提到的都是以行为单位来操作的。那么如果想要搞定一个区块范围呢？如下面这个文件内容")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("192.168.1.1    host1.class.net\n192.168.1.2    host2.class.net\n192.168.1.3    host3.class.net\n192.168.1.4    host4.class.net\n192.168.1.5    host5.class.net\n192.168.1.6    host6.class.net\n192.168.1.7    host7.class.net\n192.168.1.8    host8.class.net\n192.168.1.9    host9.class.net\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br")])]),e("p",[t._v("假设想要将 host1，host2 等复制，并且加到每一行的后面，即每一行的结果变成 "),e("code",[t._v("192.168.1.1 host1.class.net host2.class.net...")]),t._v(" 。在传统或现代的窗口型编辑器似乎不容易达到这个需求，在 vim 中可以使用 Visual Block 区块功能。当按下 v 或 V 或则 ctrl+v 时，光标移动过的地方就会开始反白，按键含义如下")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("按键")]),t._v(" "),e("th",[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("v")]),t._v(" "),e("td",[t._v("字符选择，会将光标经过的地方反白选择")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("V")]),t._v(" "),e("td",[t._v("行选择，会将光标经过的行反白选择")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ctrl + v")]),t._v(" "),e("td",[t._v("区块选择，可以用长方形的方式选择")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("y")]),t._v(" "),e("td",[t._v("将反白的地方复制起来")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("d")]),t._v(" "),e("td",[t._v("将反白的地方删除")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("p")]),t._v(" "),e("td",[t._v("将刚刚复制的区块，在光标所在处贴上")])])])]),t._v(" "),e("p",[t._v("实践练习区块怎么使用")]),t._v(" "),e("p",[e("img",{attrs:{src:a(464),alt:"image-20191103225043244"}})]),t._v(" "),e("p",[e("img",{attrs:{src:a(465),alt:"image-20191103225331571"}})]),t._v(" "),e("p",[e("img",{attrs:{src:a(466),alt:"image-20191103225611580"}})]),t._v(" "),e("p",[t._v("该功能很强，在 idea 编辑器中也提供了类似的功能，区块编辑")]),t._v(" "),e("h2",{attrs:{id:"多文件编辑"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多文件编辑"}},[t._v("#")]),t._v(" 多文件编辑")]),t._v(" "),e("p",[t._v("想象这样一个场景：要将刚刚 host 内的 IP 复制到 /etc/hosts 这个文件去，那么该如何编辑？我们知道在 vi 内可以使用 :r filename 来读入某个文件的内容，不过是将整个文件读入，如果只想要部分内容呢？这个时候就可以使用 vim 的多文件编辑功能了。使用 vim 后面同时接好几个文件来同时开启，相关按键有")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("按键")]),t._v(" "),e("th",[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v(":n")]),t._v(" "),e("td",[t._v("编辑下一个文件")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v(":N")]),t._v(" "),e("td",[t._v("编辑上一个文件")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v(":files")]),t._v(" "),e("td",[t._v("列出目前这个 vim 开启的所有文件")])])])]),t._v(" "),e("p",[t._v("没有多文件编辑的话，实现将 A 文件内的 10 条消息移动到 B 文件中，通常需要开两个 vim 窗口来复制，但是无法在 A 文件下达 nyy 再跑到 B 文件去 p 的指令。")]),t._v(" "),e("p",[t._v("练习多文件编辑")]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开启两个文件，host 是我们刚刚编辑的那个")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("vi")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("host")]),t._v(" /etc/hosts\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用 files 指令查看编辑的文件有哪些")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在一般指令模式下输入 :files 指令")]),t._v("\n:files\n  "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" %a   "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"host"')]),t._v("                         line "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("      "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/etc/hosts"')]),t._v("                   line "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\nPress ENTER or "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("command")]),t._v(" to "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("continue")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 上面列出了两个，并告知按下任意键会回到 vim 的一般指令模式中")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(". 回到一般指令模式中，跳转到第一行，输入 4yy 复制 "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" 行数据\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(". 输入 :n 会来到第二个编辑的文件，也就是 /etc/hosts\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(". 按下 G 跳转到最后一行，再按 p 贴上 "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" 行数据\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(". 按下多次 u 来取消刚才的操作，也就是恢复 /etc/hosts 中数据到原样\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(". 最终按下 :q 离开 "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("vim")]),t._v(" 编辑器\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br")])]),e("h1",{attrs:{id:"多窗口功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多窗口功能"}},[t._v("#")]),t._v(" # 多窗口功能")]),t._v(" "),e("p",[t._v("在开始逐个小节前，先来想象两个情况：")]),t._v(" "),e("ol",[e("li",[t._v("当我有一个文件非常的大，查阅到后面的数据时，想要"),e("em",[t._v("对照")]),t._v("前面的数据，是否需要使用 ctrl + f 与 ctrl + b 或 pageup、pagedown 功能键来前后翻页对照？")]),t._v(" "),e("li",[t._v("我有两个需要对照看的文件，不想使用前一小节提到的多文件编辑功能")])]),t._v(" "),e("p",[t._v("vim 有「分区窗口」的功能，在指令行模式输入 "),e("code",[t._v(":sp filename")]),t._v("即可，filename 存在则开启另一个文件，不存在则出现的是相同的文件内容")]),t._v(" "),e("p",[t._v("使用 vim /etc/man_db.conf，然后输入 「:sp」就会出现上下各一个窗口，两个窗口都是同一个文件内容")]),t._v(" "),e("p",[e("img",{attrs:{src:a(467),alt:"image-20191103231523429"}})]),t._v(" "),e("p",[t._v("再次输入 "),e("code",[t._v(":sp /etc/hosts")]),t._v(" 则会再分出来一个窗口\n"),e("img",{attrs:{src:a(468),alt:"image-20191103231747431"}})]),t._v(" "),e("p",[t._v("可以使用 ctrl + w + ↑ 和 ctrl + w + ↓ 组合键来切换窗口（笔者测试使用 ctrl + w 可以切换 ctrl + w + 箭头触发了宿主机的 ui 切换功能）")]),t._v(" "),e("p",[t._v("多窗口情况下的按键功能")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("按键")]),t._v(" "),e("th",[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v(":sp [filename]")]),t._v(" "),e("td",[t._v("开启一个新窗口，不加 filename 则默认打开当前文件，否则打开指定文件")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ctrl + w + j/↓")]),t._v(" "),e("td",[t._v("使用方法：先按下 ctrl 不放，再按下 w 后放开所有的按键，再按下 j 或向下的箭头键，则光标可移动到下方的窗口")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ctrl + w + k/上")]),t._v(" "),e("td",[t._v("同上")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ctrl  + w + q")]),t._v(" "),e("td",[t._v("就是 :q 结束离开。比如：想要结束下方的窗口，先使用 ctrl + w + j 移动到下方窗口，输入 :q 或则按下 ctrl + w + q 离开")])])])]),t._v(" "),e("h2",{attrs:{id:"vim-的挑字补全功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vim-的挑字补全功能"}},[t._v("#")]),t._v(" vim 的挑字补全功能")]),t._v(" "),e("p",[t._v("我们知道在 bash 环境下可以按下 tab 按钮来达成指令、参数、文件名的补全功能，还有 windows 系统上的各种程序编辑器，如 notepad++，都会提供：语法检验和根据扩展名来挑字的功能。")]),t._v(" "),e("p",[t._v("在语法检验方面，vim 已经使用颜色来达成了，建议可以记忆的 vim 补齐功能如下：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("组合按键")]),t._v(" "),e("th",[t._v("补齐内容")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ctrl + x -> ctrl +n")]),t._v(" "),e("td",[t._v("通过目前正在编辑的这个「文件的内容文件」作为关键词，补齐;")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ctrl + x -> ctr + f")]),t._v(" "),e("td",[t._v("以当前目录内的「文件名」作为关键词，予以补齐")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("ctrl + x -> ctrl + o")]),t._v(" "),e("td",[t._v("以扩展名作为语法补充，以 vim 内置的关键词，予以补齐")])])])]),t._v(" "),e("p",[t._v("用法：先输入关键词如 host 再按 ctrl + x，再按 ctrl + n，如果有可补齐的待选文案，会显示下拉列表给你选择")]),t._v(" "),e("p",[t._v("实践练习：使用 css 美化功能时，突然想到有个北京的东西要处理，但是忘记了背景 CSS 关键语法，就可以用如下的模式来处理")]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 一定要是 .html 否则不会使用正确的语法检验功能")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("vi")]),t._v(" htmltest.html  \n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[e("img",{attrs:{src:a(469),alt:"image-20191103234338120"}})]),t._v(" "),e("h2",{attrs:{id:"vim-环境设置与记录：-vimrc、-viminfo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vim-环境设置与记录：-vimrc、-viminfo"}},[t._v("#")]),t._v(" vim 环境设置与记录："),e("code",[t._v("~/.vimrc")]),t._v("、"),e("code",[t._v("~/.viminfo")])]),t._v(" "),e("p",[t._v("有没有发现：如果以 vim 软件来搜寻一个文件内部的某个字符串时，这个字符串会被反白，而下次我们再次以 vim 编辑这个文件时，该搜索的字符串反白的情况还是存在的，甚至于在编辑其他文件时，如果也存在该字符，也会主动反白。另外，当我们重复编辑同一个文件时，当第二次进入该文件时，光标竟然在上次离开的那一行上面")]),t._v(" "),e("p",[t._v("这是因为 vim 会主动将你曾经做过的行为记录在 "),e("code",[t._v("~/.viminfo")]),t._v(" 文件中，方便你下次可以轻松作业")]),t._v(" "),e("p",[t._v("此外，每个 distribution 对 vim 的预设环境都不太相同，例如：某些版本在搜寻关键词时并不会高亮度反白，有些版本则会主动帮你进行缩排的行为。这些其实都可以自定设置的，vim 的环境设置参数有很多，可以在一般模式下输入「:set all」来查询，不过可设置的项目太多了，这里仅列出一些平时比较常用的一些简单设置值，供你参考")]),t._v(" "),e("p",[t._v("vim 的环境设置参数")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("item")]),t._v(" "),e("th",[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v(":set nu、:set nonu")]),t._v(" "),e("td",[t._v("设置与取消行号")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v(":set hlsearch、:set nohlsearch")]),t._v(" "),e("td",[t._v("hlsearch 是 high light search （高亮度搜索）。设置是否将搜索到的字符串反白设置。默认为 hlsearch")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v(":set autoindent、:set noautoindent")]),t._v(" "),e("td",[t._v("是否自动缩排？当你按下 Enter 编辑新的一行时，光标不会在行首，而是在于上一行第一个非空格符处对齐")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v(":set backup")]),t._v(" "),e("td",[t._v("是否自动存储备份文件，一般是 nobackup 的，如果设置为 backup，那么当你更改任何一个文件时，则源文件会被另存一个文件名为 filename~ 的文件。如：编辑 hosts，设置 :set backup ，那么修改 hosts 时，在同目录下就会产生 hosts~ 的文件")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v(":set ruler")]),t._v(" "),e("td",[t._v("右下角的状态栏说明，是否显示或不显示该状态的显示")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v(":set shwmode")]),t._v(" "),e("td",[t._v("是否要显示 ---INSERT-- 之类的提示在左下角的状态栏")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v(":set backpace=(012)")]),t._v(" "),e("td",[t._v("一般来说，如果我们按下 i 进入编辑模式后，可以利用退格键（baskpace）来删除任意字符的。但是某些 distribution 则不允许如此。此时，可以通过 backpace 来设置，值为 2 时，可以删除任意值；0 或 1 时，仅可删除刚刚输入的字符，而无法删除原本就已经存在的文字")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v(":set all")]),t._v(" "),e("td",[t._v("显示目前所有的环境参数设置")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v(":syntax on 、 :syntax off")]),t._v(" "),e("td",[t._v("是否依据程序相关语法显示不同颜色")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v(":set bg=dark、:set bg=light")]),t._v(" "),e("td",[t._v("可以显示不同颜色色调，预设是 light。如果你常常发现批注的字体深蓝色是在很不容易看，就可以设置为 dark")])])])]),t._v(" "),e("p",[t._v("总之这些常用的设置非常有用处，但是在行模式下设置只是针对当前打开的 vim 有效果；想要修改默认打开就生效的话，可以修改 "),e("code",[t._v("~/.vimrc")]),t._v(" 这个文件来达到（如果此文件不存在，请手工创建）")]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("vi")]),t._v(" ~/.vimrc\n"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('" 该文件的注释是使用双引号表达\nset hlsearch    "')]),t._v("高亮度反白\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("backspace")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"可随时用退格键删除\nset autoindent  "')]),t._v("自动缩进\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" ruler       "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"可现实最后一列的状态\nset showmode    "')]),t._v("左下角那一列的状态\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" nu          "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"在每一行的最前面显示行号\nset bg=dark     "')]),t._v('显示不同的底色色调\nsyntax on       "进行语法检验，颜色显示\n\n\n'),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 保存后，再次打开最明显的就是自动显示行号了，可见是生效了的")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br")])]),e("h2",{attrs:{id:"vim-常用指令示意图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vim-常用指令示意图"}},[t._v("#")]),t._v(" vim 常用指令示意图")]),t._v(" "),e("p",[e("img",{attrs:{src:a(470),alt:"img"}})])])}),[],!1,null,null,null);s.default=n.exports}}]);