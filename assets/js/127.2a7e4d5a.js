(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{639:function(a,n,s){"use strict";s.r(n);var t=s(16),r=Object(t.a)({},(function(){var a=this,n=a.$createElement,s=a._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"可唤醒停机期间的工作任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可唤醒停机期间的工作任务"}},[a._v("#")]),a._v(" 可唤醒停机期间的工作任务")]),a._v(" "),s("p",[a._v("考虑一个场景：你有一个定时任务，每周星期天凌晨 2 点 ，执行一次，但是很不幸，这个时间点停电了，等你上班周 1 去开机时，这个定时任务句错过了执行时机。")]),a._v(" "),s("p",[a._v("这种情况下，需要靠 anacron 指令：主动帮你进行时间到了但却没有执行的定时任务")]),a._v(" "),s("h2",{attrs:{id:"什么是-anacron"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-anacron"}},[a._v("#")]),a._v(" 什么是 anacron")]),a._v(" "),s("p",[a._v("anacron：主动帮你进行时间到了但却没有执行的定时任务，不是来替代 crond 的")]),a._v(" "),s("p",[a._v("anacron 其实是前面谈到过的，每小时被 crond 执行一次，会去检测相关定时任务是否有执行，由于 anacron 预设以 每天、每周、每个月去检查未进行的 crontab 任务，因此对于某些特殊的使用环境非常有帮助")]),a._v(" "),s("p",[a._v("比如：你的主机，是共用的，周末 2 天没有人使用，需要关机，但是有一些任务在周日早上执行，而又关机了，那么重新开机的时候，就可以利用 anacron 的功能，执行没有执行的任务。")]),a._v(" "),s("p",[a._v("anacron 读取的时间记录文件（timestamps），分析现在的时间记录文件所记载的上次执行 anacron 的时间，两者比较后若发现有差异，那就是在某些时刻没有进行 crontab，此时就会开始执行未进行的 crontab 任务")]),a._v(" "),s("p",[a._v("简要说：anacron 的原理是，依赖每小时的执行一次的任务记录下时间，下一次执行时，对比当前时间的差异，如果中间有缺少执行，那么表示 crontab 任务在这期间没有被执行过（笔者有疑问就是，一小时，那么怎么知道每小时的 5 分钟到 59 分这个时间点的任务是否被执行过了呢？）")]),a._v(" "),s("h2",{attrs:{id:"anacron-与-etc-anacrontab"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#anacron-与-etc-anacrontab"}},[a._v("#")]),a._v(" anacron 与 "),s("code",[a._v("/etc/anacrontab")])]),a._v(" "),s("p",[a._v("anacron 不是一个服务，是一个程序，每小时被主动执行一次，所以 anacron 的配置文件放置在 "),s("code",[a._v("/etc/cron.hourly/")]),a._v(" 目录中的")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("root@study ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# cat /etc/cron.hourly/   ")]),a._v("\n0anacron     mcelog.cron  \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("root@study ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# cat /etc/cron.hourly/0anacron ")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#!/bin/sh")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Check whether 0anacron was run today already")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("test")]),a._v(" -r /var/spool/anacron/cron.daily"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("then")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("day")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("cat")]),a._v(" /var/spool/anacron/cron.daily"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("fi")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("date")]),a._v(" +%Y%m%d"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$day")]),a._v('"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("then")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exit")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("fi")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 上面校验前一次执行 anacron 时间的时间戳 ")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Do not run jobs when on battery power")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("test")]),a._v(" -x /usr/bin/on_ac_power"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("then")]),a._v("\n    /usr/bin/on_ac_power "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("/dev/null "),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[a._v("2")]),a._v(">")]),s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[a._v("&1")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("test")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$?")]),a._v(" -eq "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("then")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exit")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("fi")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("fi")]),a._v("\n/usr/sbin/anacron -s\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 经过了一些判断，然后执行了 anacron  -s 指令")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br")])]),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("anacron "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("-sfn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("job"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("\nanacron -u "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("job"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".\n\n选项与参数：\n\t-s：开始一连续的执行各项工作 job，会依据时间记录文件的数据判断是否进行\n\t-f：强制进行，而不去判断时间记录文件的时间戳\n\t-n：like进行未进行的任务，而不言辞（delay）等待时间\n\t-u：仅更新时间记录文件的时间戳，不进行任何工作\n\tjob：由 /etc/anacrontab 定义的各项工作名称\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br")])]),s("p",[a._v("在 CentOS 中，anacron 每小时都会执行一次，为了担心 anacron 误判时间参数，因此 "),s("code",[a._v("/etc/cron.hourly/")]),a._v(" 中的 anacron 文件名前加了一个 "),s("code",[a._v("0(0anacron)")]),a._v("，让 anacron 最先执行。")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("root@study ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# cat /etc/anacrontab ")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# /etc/anacrontab: configuration file for anacron")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# See anacron(8) and anacrontab(5) for details.")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("SHELL")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/bin/sh\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("PATH")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/sbin:/bin:/usr/sbin:/usr/bin\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("MAILTO")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("root\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# the maximal random delay added to the base delay of the jobs")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("RANDOM_DELAY")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("45")]),a._v("\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 随机给予最大延迟时间，单位是分钟")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# the jobs will be started during the following hours only")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("START_HOURS_RANGE")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("-22\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 延迟多少个小时内应该要执行的任务时间")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 天数\t延迟时间\t工作名称定义\t\t\t\t\t 实际要执行的指令串")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#period in days   delay in minutes   job-identifier   command")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("       "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("       cron.daily              "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("nice")]),a._v(" run-parts /etc/cron.daily\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),a._v("       "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("25")]),a._v("      cron.weekly             "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("nice")]),a._v(" run-parts /etc/cron.weekly\n@monthly "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("45")]),a._v("     cron.monthly            "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("nice")]),a._v(" run-parts /etc/cron.monthly\n\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br")])]),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("root@study ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# more /var/spool/anacron/*")]),a._v("\n::::::::::::::\n/var/spool/anacron/cron.daily\n::::::::::::::\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20200308")]),a._v("\n::::::::::::::\n/var/spool/anacron/cron.monthly\n::::::::::::::\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20200212")]),a._v("\n::::::::::::::\n/var/spool/anacron/cron.weekly\n::::::::::::::\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20200308")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 上面则是三个工作名称的时间记录文件以及记录的时间戳")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br")])]),s("p",[a._v("以 "),s("code",[a._v("/etc/cron.daily")]),a._v(" 的设置来说明：")]),a._v(" "),s("ul",[s("li",[a._v("天数：anacron 执行当前与时间戳（"),s("code",[a._v("/var/spool/anacron")]),a._v(" 内时间记录文件）相差的天数，若超过此天数，就准备开始执行，若没有超过此天数，则不执行后续的指令")]),a._v(" "),s("li",[a._v("延迟时间：若确定超过天数导致要执行任务了，那么延迟执行的时间，因为担心立即启动会有其他资源冲突的问题")]),a._v(" "),s("li",[a._v("工作名称定义：无意义，只在 "),s("code",[a._v("/var/log/cron")]),a._v(" 里记录的名称，通常与后续的目录资源名相同")]),a._v(" "),s("li",[a._v("实际要进行的指令串：与 0hourly 很细，通过 run-parts 来处理的")])]),a._v(" "),s("p",[a._v("根据上面的配置文件内容，大概知道 anacron 的执行流程应该如下（以 cron.daily 为例）:")]),a._v(" "),s("ol",[s("li",[a._v("由 "),s("code",[a._v("/etc/anacrontab")]),a._v(" 分析到 cron.daily 这项工作名称的天数为 1 天")]),a._v(" "),s("li",[a._v("由 "),s("code",[a._v("/var/spool/anacron/cron.daily")]),a._v(" 取出最仅一次执行 anacron 的时间戳")]),a._v(" "),s("li",[a._v("又上个步骤与目前的时间比较，若相差 1 天以上（含 1 天），就准备进行指令")]),a._v(" "),s("li",[a._v("若准备进行指令，根据 "),s("code",[a._v("/etc/anacrontab")]),a._v(" 的设置，将延迟 5 分钟 + 3 小时（看 START_HOURS_RANGE 的设置）")]),a._v(" "),s("li",[a._v("延迟时间后，开始执行后续指令，即 "),s("code",[a._v("run-parts /etc/cron.daily")]),a._v(" 指令")]),a._v(" "),s("li",[a._v("执行完毕后，anacron 程序结束")])]),a._v(" "),s("p",[a._v("这也是为什么你的系统开机后，一小时左右会有一段时间忙碌，就是因为在执行上述的配置任务")]),a._v(" "),s("h2",{attrs:{id:"总结：crond-与-anacron-的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结：crond-与-anacron-的关系"}},[a._v("#")]),a._v(" 总结：crond 与 anacron 的关系")]),a._v(" "),s("ol",[s("li",[a._v("crond 会主动读取 "),s("code",[a._v("/etc/crontab、/var/spool/cron/*、/etc/cron.d/*")]),a._v(" 等配置文件，并依据设置的时间去执行任务")]),a._v(" "),s("li",[a._v("根据 "),s("code",[a._v("/etc/cron.d/0hourly")]),a._v(" 的配置，主动去 "),s("code",[a._v("/etc/cron.hourly/")]),a._v(" 目录下，执行所有在该目录下的执行文件")]),a._v(" "),s("li",[a._v("因为 "),s("code",[a._v("/etc/cron.houly/0anacron")]),a._v(" 脚本文件的缘故，主动的每小时执行 anacron，并调用 "),s("code",[a._v("/etc/anacrontab")]),a._v(" 的配置文件")]),a._v(" "),s("li",[a._v("根据 "),s("code",[a._v("/etc/anacrontab")]),a._v(" 的配置，每天、每周、每月去分析 "),s("code",[a._v("/etc/cron.daily、/etc/cron.weekly、/etc/cron.monthly")]),a._v(" 内的执行文件，进行固定周期所执行的指令")])]),a._v(" "),s("p",[a._v("也就是说，如果你每个周日所需要执行的配置是放置在 "),s("code",[a._v("/etc/crontab")]),a._v(" 中的话，那么该动作只要过期了就过期了，而放在 "),s("code",[a._v("/etc/cron.weekly")]),a._v(" 目录下，那么该工作就会定期，每周执行一次的频率，如果你关机超过一周，那么开机后的数个小时内，该工作就会主动的被执行")])])}),[],!1,null,null,null);n.default=r.exports}}]);